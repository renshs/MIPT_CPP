/*
    Оператор new

    В языке C для выделения памяти в Куче использовалась функции malloc и free.
    В языке C++ мы могли бы использовать эти функции для выделения памяти для базовых типов.
    Но с выделением памяти для объектов классов возникают проблемы. Так как каждый объект класса при своём
    создании должен вызывать конструктор, а malloc просто выделяет память и конструкторов не вызывает.



    Для того, чтобы создавать объекты в Куче в C++ следует воспользоваться оператором new:
        Type* p = new Type;

    Оператор new в этом виде делает следующее:
        1)  Выделяет необходимую память под один объект типа Type в Куче
        2)  Вызывает конструктор этого объекта



    Для того, чтобы удалить объект, созданный с помощью new, следует использовать оператор delete:
        delete p;

    Оператор delete в этом виде делает следующее:
        1)  Вызывает деструктор этого объекта
        2)  Освобождает память для этого объекта, выделенную с помощью new
        

*/

#include <iostream>
#include <cstdlib>
#include <string>
using std::cout, std::endl, std::string;

class Cat
{
private:
    string mname {};
    int mage     {};

public:
    Cat()   {cout << "Cat Default Constructor (" << mname << ")" << endl;}
    ~Cat()  {cout << "Cat Destructor ("          << mname << ")" << endl;}
    Cat(const string& name, int age) : mname(name), mage(age) {cout << "Cat Constructor (" << mname << ")" << endl;}
};


int main()
{
    cout << "Malloc:" << endl;
    Cat* q = (Cat*)std::malloc(sizeof(Cat));


    cout << "New:" << endl;
    Cat* p = new Cat;
}




/*
    Задачи:

        1)  Что напечатает данная программа?

        2)  Используйте функцию free и оператор delete для того, чтобы освободить выделенную память.

        3)  Выделите на Куче один объект типа int. Проверьте, будет ли он инициализован нулём.
*/